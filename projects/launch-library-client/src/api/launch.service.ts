/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - this endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * OpenAPI spec version: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse20022 } from '../model/inlineResponse20022';
import { LaunchDetailed } from '../model/launchDetailed';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LaunchService {

    protected basePath = 'https://ll.thespacedevs.com/2.2.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * API endpoint that returns all Launch objects or a single launch.
     * EXAMPLE - /launch/\\&lt;id\\&gt;/ or /launch/?mode&#x3D;list&amp;search&#x3D;SpaceX  GET Return a list of all Launch objects.  FILTERS Fields - &#39;name&#39;, &#39;id(s)&#39;, &#39;lsp__id&#39;, &#39;lsp__name&#39;, &#39;serial_number&#39;, &#39;launcher_config__id&#39;,  &#39;rocket__spacecraftflight__spacecraft__name&#39;, &#39;is_crewed&#39;, &#39;include_suborbital&#39;, &#39;spacecraft_config__ids&#39;,  &#39;related&#39;, &#39;location__ids&#39;, &#39;lsp__ids&#39;  MODE &#39;normal&#39;, &#39;list&#39;, &#39;detailed&#39;  EXAMPLE ?mode&#x3D;list  SEARCH Searches through the launch name, rocket name, launch agency, mission name &amp; spacecraft name.  EXAMPLE - ?search&#x3D;SpaceX
     * @param name 
     * @param slug 
     * @param rocketConfigurationName 
     * @param rocketConfigurationId 
     * @param status 
     * @param rocketSpacecraftflightSpacecraftName 
     * @param rocketSpacecraftflightSpacecraftNameIcontains 
     * @param rocketSpacecraftflightSpacecraftId 
     * @param rocketConfigurationManufacturerName 
     * @param rocketConfigurationManufacturerNameIcontains 
     * @param rocketConfigurationFullName 
     * @param rocketConfigurationFullNameIcontains 
     * @param missionOrbitName 
     * @param missionOrbitNameIcontains 
     * @param rSpacexApiId 
     * @param netGt 
     * @param netLt 
     * @param netGte 
     * @param netLte 
     * @param windowStartGt 
     * @param windowStartLt 
     * @param windowStartGte 
     * @param windowStartLte 
     * @param windowEndGt 
     * @param windowEndLt 
     * @param windowEndGte 
     * @param windowEndLte 
     * @param lastUpdatedGte 
     * @param lastUpdatedLte 
     * @param search A search term.
     * @param ordering Which field to use when ordering the results.
     * @param limit Number of results to return per page.
     * @param offset The initial index from which to return the results.
     * @param locationIds Filter by a comma-separated list of location ID&#39;s.
     * @param lspIds Filter by a comma-separated list of launch service providers ID&#39;s.
     * @param isCrewed Filter by launches with crew assigned.
     * @param includeSuborbital Include sub-orbital launches.
     * @param serialNumber Filter by a SpaceX First Stage core serial number. (Example: B1051)
     * @param lspName Filter by a Launch Service Provider name.
     * @param lspId Filter by a Launch Service Provider name.
     * @param launcherConfigId Filter by a Launcher Config ID.
     * @param spacecraftConfigIds Filter by a comma-separated list of spacecraft config ID&#39;s.
     * @param related Include related agencies launches. Useful for historical launches from companies that have had mergers.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public launchList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, rSpacexApiId?: string, netGt?: string, netLt?: string, netGte?: string, netLte?: string, windowStartGt?: string, windowStartLt?: string, windowStartGte?: string, windowStartLte?: string, windowEndGt?: string, windowEndLt?: string, windowEndGte?: string, windowEndLte?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public launchList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, rSpacexApiId?: string, netGt?: string, netLt?: string, netGte?: string, netLte?: string, windowStartGt?: string, windowStartLt?: string, windowStartGte?: string, windowStartLte?: string, windowEndGt?: string, windowEndLt?: string, windowEndGte?: string, windowEndLte?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public launchList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, rSpacexApiId?: string, netGt?: string, netLt?: string, netGte?: string, netLte?: string, windowStartGt?: string, windowStartLt?: string, windowStartGte?: string, windowStartLte?: string, windowEndGt?: string, windowEndLt?: string, windowEndGte?: string, windowEndLte?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public launchList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, rSpacexApiId?: string, netGt?: string, netLt?: string, netGte?: string, netLte?: string, windowStartGt?: string, windowStartLt?: string, windowStartGte?: string, windowStartLte?: string, windowEndGt?: string, windowEndLt?: string, windowEndGte?: string, windowEndLte?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {












































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (slug !== undefined && slug !== null) {
            queryParameters = queryParameters.set('slug', <any>slug);
        }
        if (rocketConfigurationName !== undefined && rocketConfigurationName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__name', <any>rocketConfigurationName);
        }
        if (rocketConfigurationId !== undefined && rocketConfigurationId !== null) {
            queryParameters = queryParameters.set('rocket__configuration__id', <any>rocketConfigurationId);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (rocketSpacecraftflightSpacecraftName !== undefined && rocketSpacecraftflightSpacecraftName !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__name', <any>rocketSpacecraftflightSpacecraftName);
        }
        if (rocketSpacecraftflightSpacecraftNameIcontains !== undefined && rocketSpacecraftflightSpacecraftNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__name__icontains', <any>rocketSpacecraftflightSpacecraftNameIcontains);
        }
        if (rocketSpacecraftflightSpacecraftId !== undefined && rocketSpacecraftflightSpacecraftId !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__id', <any>rocketSpacecraftflightSpacecraftId);
        }
        if (rocketConfigurationManufacturerName !== undefined && rocketConfigurationManufacturerName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__manufacturer__name', <any>rocketConfigurationManufacturerName);
        }
        if (rocketConfigurationManufacturerNameIcontains !== undefined && rocketConfigurationManufacturerNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__configuration__manufacturer__name__icontains', <any>rocketConfigurationManufacturerNameIcontains);
        }
        if (rocketConfigurationFullName !== undefined && rocketConfigurationFullName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__full_name', <any>rocketConfigurationFullName);
        }
        if (rocketConfigurationFullNameIcontains !== undefined && rocketConfigurationFullNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__configuration__full_name__icontains', <any>rocketConfigurationFullNameIcontains);
        }
        if (missionOrbitName !== undefined && missionOrbitName !== null) {
            queryParameters = queryParameters.set('mission__orbit__name', <any>missionOrbitName);
        }
        if (missionOrbitNameIcontains !== undefined && missionOrbitNameIcontains !== null) {
            queryParameters = queryParameters.set('mission__orbit__name__icontains', <any>missionOrbitNameIcontains);
        }
        if (rSpacexApiId !== undefined && rSpacexApiId !== null) {
            queryParameters = queryParameters.set('r_spacex_api_id', <any>rSpacexApiId);
        }
        if (netGt !== undefined && netGt !== null) {
            queryParameters = queryParameters.set('net__gt', <any>netGt);
        }
        if (netLt !== undefined && netLt !== null) {
            queryParameters = queryParameters.set('net__lt', <any>netLt);
        }
        if (netGte !== undefined && netGte !== null) {
            queryParameters = queryParameters.set('net__gte', <any>netGte);
        }
        if (netLte !== undefined && netLte !== null) {
            queryParameters = queryParameters.set('net__lte', <any>netLte);
        }
        if (windowStartGt !== undefined && windowStartGt !== null) {
            queryParameters = queryParameters.set('window_start__gt', <any>windowStartGt);
        }
        if (windowStartLt !== undefined && windowStartLt !== null) {
            queryParameters = queryParameters.set('window_start__lt', <any>windowStartLt);
        }
        if (windowStartGte !== undefined && windowStartGte !== null) {
            queryParameters = queryParameters.set('window_start__gte', <any>windowStartGte);
        }
        if (windowStartLte !== undefined && windowStartLte !== null) {
            queryParameters = queryParameters.set('window_start__lte', <any>windowStartLte);
        }
        if (windowEndGt !== undefined && windowEndGt !== null) {
            queryParameters = queryParameters.set('window_end__gt', <any>windowEndGt);
        }
        if (windowEndLt !== undefined && windowEndLt !== null) {
            queryParameters = queryParameters.set('window_end__lt', <any>windowEndLt);
        }
        if (windowEndGte !== undefined && windowEndGte !== null) {
            queryParameters = queryParameters.set('window_end__gte', <any>windowEndGte);
        }
        if (windowEndLte !== undefined && windowEndLte !== null) {
            queryParameters = queryParameters.set('window_end__lte', <any>windowEndLte);
        }
        if (lastUpdatedGte !== undefined && lastUpdatedGte !== null) {
            queryParameters = queryParameters.set('last_updated__gte', <any>lastUpdatedGte);
        }
        if (lastUpdatedLte !== undefined && lastUpdatedLte !== null) {
            queryParameters = queryParameters.set('last_updated__lte', <any>lastUpdatedLte);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (ordering !== undefined && ordering !== null) {
            queryParameters = queryParameters.set('ordering', <any>ordering);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (locationIds) {
            queryParameters = queryParameters.set('location__ids', locationIds.join(COLLECTION_FORMATS['csv']));
        }
        if (lspIds) {
            queryParameters = queryParameters.set('lsp__ids', lspIds.join(COLLECTION_FORMATS['csv']));
        }
        if (isCrewed !== undefined && isCrewed !== null) {
            queryParameters = queryParameters.set('is_crewed', <any>isCrewed);
        }
        if (includeSuborbital !== undefined && includeSuborbital !== null) {
            queryParameters = queryParameters.set('include_suborbital', <any>includeSuborbital);
        }
        if (serialNumber !== undefined && serialNumber !== null) {
            queryParameters = queryParameters.set('serial_number', <any>serialNumber);
        }
        if (lspName !== undefined && lspName !== null) {
            queryParameters = queryParameters.set('lsp__name', <any>lspName);
        }
        if (lspId !== undefined && lspId !== null) {
            queryParameters = queryParameters.set('lsp__id', <any>lspId);
        }
        if (launcherConfigId !== undefined && launcherConfigId !== null) {
            queryParameters = queryParameters.set('launcher_config__id', <any>launcherConfigId);
        }
        if (spacecraftConfigIds) {
            queryParameters = queryParameters.set('spacecraft_config_ids', spacecraftConfigIds.join(COLLECTION_FORMATS['csv']));
        }
        if (related !== undefined && related !== null) {
            queryParameters = queryParameters.set('related', <any>related);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<InlineResponse20022>(`${this.basePath}/launch/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * API endpoint that returns previous Launch objects.
     * GET Return a list of previous Launches  FILTERS Fields - &#39;name&#39;, &#39;id(s)&#39;, &#39;lsp__id&#39;, &#39;lsp__name&#39;, &#39;serial_number&#39;, &#39;launcher_config__id&#39;,  &#39;rocket__spacecraftflight__spacecraft__name&#39;, &#39;is_crewed&#39;, &#39;include_suborbital&#39;, &#39;spacecraft_config__ids&#39;,  &#39;related&#39;, &#39;location__ids&#39;, &#39;lsp__ids&#39;  MODE &#39;normal&#39;, &#39;list&#39;, &#39;detailed&#39; EXAMPLE ?mode&#x3D;list  SEARCH Searches through the launch name, rocket name, launch agency and mission name. EXAMPLE - ?search&#x3D;SpaceX
     * @param name 
     * @param slug 
     * @param rocketConfigurationName 
     * @param rocketConfigurationId 
     * @param status 
     * @param rocketSpacecraftflightSpacecraftName 
     * @param rocketSpacecraftflightSpacecraftNameIcontains 
     * @param rocketSpacecraftflightSpacecraftId 
     * @param rocketConfigurationManufacturerName 
     * @param rocketConfigurationManufacturerNameIcontains 
     * @param rocketConfigurationFullName 
     * @param rocketConfigurationFullNameIcontains 
     * @param missionOrbitName 
     * @param missionOrbitNameIcontains 
     * @param program 
     * @param rSpacexApiId 
     * @param search A search term.
     * @param ordering Which field to use when ordering the results.
     * @param limit Number of results to return per page.
     * @param offset The initial index from which to return the results.
     * @param locationIds Filter by a comma-separated list of location ID&#39;s.
     * @param lspIds Filter by a comma-separated list of launch service providers ID&#39;s.
     * @param isCrewed Filter by launches with crew assigned.
     * @param includeSuborbital Include sub-orbital launches.
     * @param serialNumber Filter by a SpaceX First Stage core serial number. (Example: B1051)
     * @param lspName Filter by a Launch Service Provider name.
     * @param lspId Filter by a Launch Service Provider name.
     * @param launcherConfigId Filter by a Launcher Config ID.
     * @param spacecraftConfigIds Filter by a comma-separated list of spacecraft config ID&#39;s.
     * @param related Include related agencies launches. Useful for historical launches from companies that have had mergers.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public launchPreviousList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public launchPreviousList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public launchPreviousList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public launchPreviousList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (slug !== undefined && slug !== null) {
            queryParameters = queryParameters.set('slug', <any>slug);
        }
        if (rocketConfigurationName !== undefined && rocketConfigurationName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__name', <any>rocketConfigurationName);
        }
        if (rocketConfigurationId !== undefined && rocketConfigurationId !== null) {
            queryParameters = queryParameters.set('rocket__configuration__id', <any>rocketConfigurationId);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (rocketSpacecraftflightSpacecraftName !== undefined && rocketSpacecraftflightSpacecraftName !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__name', <any>rocketSpacecraftflightSpacecraftName);
        }
        if (rocketSpacecraftflightSpacecraftNameIcontains !== undefined && rocketSpacecraftflightSpacecraftNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__name__icontains', <any>rocketSpacecraftflightSpacecraftNameIcontains);
        }
        if (rocketSpacecraftflightSpacecraftId !== undefined && rocketSpacecraftflightSpacecraftId !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__id', <any>rocketSpacecraftflightSpacecraftId);
        }
        if (rocketConfigurationManufacturerName !== undefined && rocketConfigurationManufacturerName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__manufacturer__name', <any>rocketConfigurationManufacturerName);
        }
        if (rocketConfigurationManufacturerNameIcontains !== undefined && rocketConfigurationManufacturerNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__configuration__manufacturer__name__icontains', <any>rocketConfigurationManufacturerNameIcontains);
        }
        if (rocketConfigurationFullName !== undefined && rocketConfigurationFullName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__full_name', <any>rocketConfigurationFullName);
        }
        if (rocketConfigurationFullNameIcontains !== undefined && rocketConfigurationFullNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__configuration__full_name__icontains', <any>rocketConfigurationFullNameIcontains);
        }
        if (missionOrbitName !== undefined && missionOrbitName !== null) {
            queryParameters = queryParameters.set('mission__orbit__name', <any>missionOrbitName);
        }
        if (missionOrbitNameIcontains !== undefined && missionOrbitNameIcontains !== null) {
            queryParameters = queryParameters.set('mission__orbit__name__icontains', <any>missionOrbitNameIcontains);
        }
        if (program !== undefined && program !== null) {
            queryParameters = queryParameters.set('program', <any>program);
        }
        if (rSpacexApiId !== undefined && rSpacexApiId !== null) {
            queryParameters = queryParameters.set('r_spacex_api_id', <any>rSpacexApiId);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (ordering !== undefined && ordering !== null) {
            queryParameters = queryParameters.set('ordering', <any>ordering);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (locationIds) {
            queryParameters = queryParameters.set('location__ids', locationIds.join(COLLECTION_FORMATS['csv']));
        }
        if (lspIds) {
            queryParameters = queryParameters.set('lsp__ids', lspIds.join(COLLECTION_FORMATS['csv']));
        }
        if (isCrewed !== undefined && isCrewed !== null) {
            queryParameters = queryParameters.set('is_crewed', <any>isCrewed);
        }
        if (includeSuborbital !== undefined && includeSuborbital !== null) {
            queryParameters = queryParameters.set('include_suborbital', <any>includeSuborbital);
        }
        if (serialNumber !== undefined && serialNumber !== null) {
            queryParameters = queryParameters.set('serial_number', <any>serialNumber);
        }
        if (lspName !== undefined && lspName !== null) {
            queryParameters = queryParameters.set('lsp__name', <any>lspName);
        }
        if (lspId !== undefined && lspId !== null) {
            queryParameters = queryParameters.set('lsp__id', <any>lspId);
        }
        if (launcherConfigId !== undefined && launcherConfigId !== null) {
            queryParameters = queryParameters.set('launcher_config__id', <any>launcherConfigId);
        }
        if (spacecraftConfigIds) {
            queryParameters = queryParameters.set('spacecraft_config_ids', spacecraftConfigIds.join(COLLECTION_FORMATS['csv']));
        }
        if (related !== undefined && related !== null) {
            queryParameters = queryParameters.set('related', <any>related);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<InlineResponse20022>(`${this.basePath}/launch/previous/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * API endpoint that returns previous Launch objects.
     * GET Return a list of previous Launches  FILTERS Fields - &#39;name&#39;, &#39;id(s)&#39;, &#39;lsp__id&#39;, &#39;lsp__name&#39;, &#39;serial_number&#39;, &#39;launcher_config__id&#39;,  &#39;rocket__spacecraftflight__spacecraft__name&#39;, &#39;is_crewed&#39;, &#39;include_suborbital&#39;, &#39;spacecraft_config__ids&#39;,  &#39;related&#39;, &#39;location__ids&#39;, &#39;lsp__ids&#39;  MODE &#39;normal&#39;, &#39;list&#39;, &#39;detailed&#39; EXAMPLE ?mode&#x3D;list  SEARCH Searches through the launch name, rocket name, launch agency and mission name. EXAMPLE - ?search&#x3D;SpaceX
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public launchPreviousRead(id: string, observe?: 'body', reportProgress?: boolean): Observable<LaunchDetailed>;
    public launchPreviousRead(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LaunchDetailed>>;
    public launchPreviousRead(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LaunchDetailed>>;
    public launchPreviousRead(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling launchPreviousRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LaunchDetailed>(`${this.basePath}/launch/previous/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * API endpoint that returns all Launch objects or a single launch.
     * EXAMPLE - /launch/\\&lt;id\\&gt;/ or /launch/?mode&#x3D;list&amp;search&#x3D;SpaceX  GET Return a list of all Launch objects.  FILTERS Fields - &#39;name&#39;, &#39;id(s)&#39;, &#39;lsp__id&#39;, &#39;lsp__name&#39;, &#39;serial_number&#39;, &#39;launcher_config__id&#39;,  &#39;rocket__spacecraftflight__spacecraft__name&#39;, &#39;is_crewed&#39;, &#39;include_suborbital&#39;, &#39;spacecraft_config__ids&#39;,  &#39;related&#39;, &#39;location__ids&#39;, &#39;lsp__ids&#39;  MODE &#39;normal&#39;, &#39;list&#39;, &#39;detailed&#39;  EXAMPLE ?mode&#x3D;list  SEARCH Searches through the launch name, rocket name, launch agency, mission name &amp; spacecraft name.  EXAMPLE - ?search&#x3D;SpaceX
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public launchRead(id: string, observe?: 'body', reportProgress?: boolean): Observable<LaunchDetailed>;
    public launchRead(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LaunchDetailed>>;
    public launchRead(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LaunchDetailed>>;
    public launchRead(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling launchRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LaunchDetailed>(`${this.basePath}/launch/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * API endpoint that returns future Launch objects and launches from the last twenty four hours.
     * GET Return a list of future Launches  FILTERS Fields - &#39;name&#39;, &#39;id(s)&#39;, &#39;lsp__id&#39;, &#39;lsp__name&#39;, &#39;serial_number&#39;, &#39;launcher_config__id&#39;,  &#39;rocket__spacecraftflight__spacecraft__name&#39;, &#39;is_crewed&#39;, &#39;include_suborbital&#39;, &#39;spacecraft_config__ids&#39;,  &#39;related&#39;, &#39;location__ids&#39;, &#39;lsp__ids&#39;  MODE &#39;normal&#39;, &#39;list&#39;, &#39;detailed&#39;  EXAMPLE ?mode&#x3D;list  SEARCH Searches through the launch name, rocket name, launch agency and mission name. EXAMPLE - ?search&#x3D;SpaceX
     * @param name 
     * @param slug 
     * @param rocketConfigurationName 
     * @param rocketConfigurationId 
     * @param status 
     * @param rocketSpacecraftflightSpacecraftName 
     * @param rocketSpacecraftflightSpacecraftNameIcontains 
     * @param rocketSpacecraftflightSpacecraftId 
     * @param rocketConfigurationManufacturerName 
     * @param rocketConfigurationManufacturerNameIcontains 
     * @param rocketConfigurationFullName 
     * @param rocketConfigurationFullNameIcontains 
     * @param missionOrbitName 
     * @param missionOrbitNameIcontains 
     * @param program 
     * @param rSpacexApiId 
     * @param search A search term.
     * @param ordering Which field to use when ordering the results.
     * @param limit Number of results to return per page.
     * @param offset The initial index from which to return the results.
     * @param locationIds Filter by a comma-separated list of location ID&#39;s.
     * @param lspIds Filter by a comma-separated list of launch service providers ID&#39;s.
     * @param isCrewed Filter by launches with crew assigned.
     * @param includeSuborbital Include sub-orbital launches.
     * @param serialNumber Filter by a SpaceX First Stage core serial number. (Example: B1051)
     * @param lspName Filter by a Launch Service Provider name.
     * @param lspId Filter by a Launch Service Provider name.
     * @param launcherConfigId Filter by a Launcher Config ID.
     * @param spacecraftConfigIds Filter by a comma-separated list of spacecraft config ID&#39;s.
     * @param related Include related agencies launches. Useful for historical launches from companies that have had mergers.
     * @param hideRecentPrevious Hide launches in previous 24 hours from response.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public launchUpcomingList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, hideRecentPrevious?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public launchUpcomingList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, hideRecentPrevious?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public launchUpcomingList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, hideRecentPrevious?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public launchUpcomingList(name?: string, slug?: string, rocketConfigurationName?: string, rocketConfigurationId?: number, status?: string, rocketSpacecraftflightSpacecraftName?: string, rocketSpacecraftflightSpacecraftNameIcontains?: string, rocketSpacecraftflightSpacecraftId?: number, rocketConfigurationManufacturerName?: string, rocketConfigurationManufacturerNameIcontains?: string, rocketConfigurationFullName?: string, rocketConfigurationFullNameIcontains?: string, missionOrbitName?: string, missionOrbitNameIcontains?: string, program?: string, rSpacexApiId?: string, search?: string, ordering?: string, limit?: number, offset?: number, locationIds?: Array<number>, lspIds?: Array<number>, isCrewed?: boolean, includeSuborbital?: boolean, serialNumber?: string, lspName?: string, lspId?: number, launcherConfigId?: number, spacecraftConfigIds?: Array<number>, related?: boolean, hideRecentPrevious?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (slug !== undefined && slug !== null) {
            queryParameters = queryParameters.set('slug', <any>slug);
        }
        if (rocketConfigurationName !== undefined && rocketConfigurationName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__name', <any>rocketConfigurationName);
        }
        if (rocketConfigurationId !== undefined && rocketConfigurationId !== null) {
            queryParameters = queryParameters.set('rocket__configuration__id', <any>rocketConfigurationId);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (rocketSpacecraftflightSpacecraftName !== undefined && rocketSpacecraftflightSpacecraftName !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__name', <any>rocketSpacecraftflightSpacecraftName);
        }
        if (rocketSpacecraftflightSpacecraftNameIcontains !== undefined && rocketSpacecraftflightSpacecraftNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__name__icontains', <any>rocketSpacecraftflightSpacecraftNameIcontains);
        }
        if (rocketSpacecraftflightSpacecraftId !== undefined && rocketSpacecraftflightSpacecraftId !== null) {
            queryParameters = queryParameters.set('rocket__spacecraftflight__spacecraft__id', <any>rocketSpacecraftflightSpacecraftId);
        }
        if (rocketConfigurationManufacturerName !== undefined && rocketConfigurationManufacturerName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__manufacturer__name', <any>rocketConfigurationManufacturerName);
        }
        if (rocketConfigurationManufacturerNameIcontains !== undefined && rocketConfigurationManufacturerNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__configuration__manufacturer__name__icontains', <any>rocketConfigurationManufacturerNameIcontains);
        }
        if (rocketConfigurationFullName !== undefined && rocketConfigurationFullName !== null) {
            queryParameters = queryParameters.set('rocket__configuration__full_name', <any>rocketConfigurationFullName);
        }
        if (rocketConfigurationFullNameIcontains !== undefined && rocketConfigurationFullNameIcontains !== null) {
            queryParameters = queryParameters.set('rocket__configuration__full_name__icontains', <any>rocketConfigurationFullNameIcontains);
        }
        if (missionOrbitName !== undefined && missionOrbitName !== null) {
            queryParameters = queryParameters.set('mission__orbit__name', <any>missionOrbitName);
        }
        if (missionOrbitNameIcontains !== undefined && missionOrbitNameIcontains !== null) {
            queryParameters = queryParameters.set('mission__orbit__name__icontains', <any>missionOrbitNameIcontains);
        }
        if (program !== undefined && program !== null) {
            queryParameters = queryParameters.set('program', <any>program);
        }
        if (rSpacexApiId !== undefined && rSpacexApiId !== null) {
            queryParameters = queryParameters.set('r_spacex_api_id', <any>rSpacexApiId);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (ordering !== undefined && ordering !== null) {
            queryParameters = queryParameters.set('ordering', <any>ordering);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (locationIds) {
            queryParameters = queryParameters.set('location__ids', locationIds.join(COLLECTION_FORMATS['csv']));
        }
        if (lspIds) {
            queryParameters = queryParameters.set('lsp__ids', lspIds.join(COLLECTION_FORMATS['csv']));
        }
        if (isCrewed !== undefined && isCrewed !== null) {
            queryParameters = queryParameters.set('is_crewed', <any>isCrewed);
        }
        if (includeSuborbital !== undefined && includeSuborbital !== null) {
            queryParameters = queryParameters.set('include_suborbital', <any>includeSuborbital);
        }
        if (serialNumber !== undefined && serialNumber !== null) {
            queryParameters = queryParameters.set('serial_number', <any>serialNumber);
        }
        if (lspName !== undefined && lspName !== null) {
            queryParameters = queryParameters.set('lsp__name', <any>lspName);
        }
        if (lspId !== undefined && lspId !== null) {
            queryParameters = queryParameters.set('lsp__id', <any>lspId);
        }
        if (launcherConfigId !== undefined && launcherConfigId !== null) {
            queryParameters = queryParameters.set('launcher_config__id', <any>launcherConfigId);
        }
        if (spacecraftConfigIds) {
            queryParameters = queryParameters.set('spacecraft_config_ids', spacecraftConfigIds.join(COLLECTION_FORMATS['csv']));
        }
        if (related !== undefined && related !== null) {
            queryParameters = queryParameters.set('related', <any>related);
        }
        if (hideRecentPrevious !== undefined && hideRecentPrevious !== null) {
            queryParameters = queryParameters.set('hide_recent_previous', <any>hideRecentPrevious);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<InlineResponse20022>(`${this.basePath}/launch/upcoming/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * API endpoint that returns future Launch objects and launches from the last twenty four hours.
     * GET Return a list of future Launches  FILTERS Fields - &#39;name&#39;, &#39;id(s)&#39;, &#39;lsp__id&#39;, &#39;lsp__name&#39;, &#39;serial_number&#39;, &#39;launcher_config__id&#39;,  &#39;rocket__spacecraftflight__spacecraft__name&#39;, &#39;is_crewed&#39;, &#39;include_suborbital&#39;, &#39;spacecraft_config__ids&#39;,  &#39;related&#39;, &#39;location__ids&#39;, &#39;lsp__ids&#39;  MODE &#39;normal&#39;, &#39;list&#39;, &#39;detailed&#39;  EXAMPLE ?mode&#x3D;list  SEARCH Searches through the launch name, rocket name, launch agency and mission name. EXAMPLE - ?search&#x3D;SpaceX
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public launchUpcomingRead(id: string, observe?: 'body', reportProgress?: boolean): Observable<LaunchDetailed>;
    public launchUpcomingRead(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LaunchDetailed>>;
    public launchUpcomingRead(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LaunchDetailed>>;
    public launchUpcomingRead(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling launchUpcomingRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LaunchDetailed>(`${this.basePath}/launch/upcoming/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
