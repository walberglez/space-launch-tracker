/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - this endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * OpenAPI spec version: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AstronautDetailed } from '../model/astronautDetailed';
import { InlineResponse2001 } from '../model/inlineResponse2001';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AstronautService {

    protected basePath = 'https://ll.thespacedevs.com/2.2.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * API endpoint that allows Astronaut to be viewed.
     * @param nationality 
     * @param name 
     * @param agencyAbbrev 
     * @param status 
     * @param dateOfBirth 
     * @param dateOfDeath 
     * @param agencyName 
     * @param dateOfBirthGt 
     * @param dateOfBirthLt 
     * @param dateOfBirthGte 
     * @param dateOfBirthLte 
     * @param dateOfDeathGt 
     * @param dateOfDeathLt 
     * @param dateOfDeathGte 
     * @param dateOfDeathLte 
     * @param search A search term.
     * @param ordering Which field to use when ordering the results.
     * @param limit Number of results to return per page.
     * @param offset The initial index from which to return the results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public astronautList(nationality?: string, name?: string, agencyAbbrev?: string, status?: string, dateOfBirth?: string, dateOfDeath?: string, agencyName?: string, dateOfBirthGt?: string, dateOfBirthLt?: string, dateOfBirthGte?: string, dateOfBirthLte?: string, dateOfDeathGt?: string, dateOfDeathLt?: string, dateOfDeathGte?: string, dateOfDeathLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public astronautList(nationality?: string, name?: string, agencyAbbrev?: string, status?: string, dateOfBirth?: string, dateOfDeath?: string, agencyName?: string, dateOfBirthGt?: string, dateOfBirthLt?: string, dateOfBirthGte?: string, dateOfBirthLte?: string, dateOfDeathGt?: string, dateOfDeathLt?: string, dateOfDeathGte?: string, dateOfDeathLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public astronautList(nationality?: string, name?: string, agencyAbbrev?: string, status?: string, dateOfBirth?: string, dateOfDeath?: string, agencyName?: string, dateOfBirthGt?: string, dateOfBirthLt?: string, dateOfBirthGte?: string, dateOfBirthLte?: string, dateOfDeathGt?: string, dateOfDeathLt?: string, dateOfDeathGte?: string, dateOfDeathLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public astronautList(nationality?: string, name?: string, agencyAbbrev?: string, status?: string, dateOfBirth?: string, dateOfDeath?: string, agencyName?: string, dateOfBirthGt?: string, dateOfBirthLt?: string, dateOfBirthGte?: string, dateOfBirthLte?: string, dateOfDeathGt?: string, dateOfDeathLt?: string, dateOfDeathGte?: string, dateOfDeathLte?: string, search?: string, ordering?: string, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nationality !== undefined && nationality !== null) {
            queryParameters = queryParameters.set('nationality', <any>nationality);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (agencyAbbrev !== undefined && agencyAbbrev !== null) {
            queryParameters = queryParameters.set('agency__abbrev', <any>agencyAbbrev);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (dateOfBirth !== undefined && dateOfBirth !== null) {
            queryParameters = queryParameters.set('date_of_birth', <any>dateOfBirth);
        }
        if (dateOfDeath !== undefined && dateOfDeath !== null) {
            queryParameters = queryParameters.set('date_of_death', <any>dateOfDeath);
        }
        if (agencyName !== undefined && agencyName !== null) {
            queryParameters = queryParameters.set('agency__name', <any>agencyName);
        }
        if (dateOfBirthGt !== undefined && dateOfBirthGt !== null) {
            queryParameters = queryParameters.set('date_of_birth__gt', <any>dateOfBirthGt);
        }
        if (dateOfBirthLt !== undefined && dateOfBirthLt !== null) {
            queryParameters = queryParameters.set('date_of_birth__lt', <any>dateOfBirthLt);
        }
        if (dateOfBirthGte !== undefined && dateOfBirthGte !== null) {
            queryParameters = queryParameters.set('date_of_birth__gte', <any>dateOfBirthGte);
        }
        if (dateOfBirthLte !== undefined && dateOfBirthLte !== null) {
            queryParameters = queryParameters.set('date_of_birth__lte', <any>dateOfBirthLte);
        }
        if (dateOfDeathGt !== undefined && dateOfDeathGt !== null) {
            queryParameters = queryParameters.set('date_of_death__gt', <any>dateOfDeathGt);
        }
        if (dateOfDeathLt !== undefined && dateOfDeathLt !== null) {
            queryParameters = queryParameters.set('date_of_death__lt', <any>dateOfDeathLt);
        }
        if (dateOfDeathGte !== undefined && dateOfDeathGte !== null) {
            queryParameters = queryParameters.set('date_of_death__gte', <any>dateOfDeathGte);
        }
        if (dateOfDeathLte !== undefined && dateOfDeathLte !== null) {
            queryParameters = queryParameters.set('date_of_death__lte', <any>dateOfDeathLte);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (ordering !== undefined && ordering !== null) {
            queryParameters = queryParameters.set('ordering', <any>ordering);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<InlineResponse2001>(`${this.basePath}/astronaut/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * API endpoint that allows Astronaut to be viewed.
     * @param id A unique integer value identifying this Astronaut.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public astronautRead(id: number, observe?: 'body', reportProgress?: boolean): Observable<AstronautDetailed>;
    public astronautRead(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AstronautDetailed>>;
    public astronautRead(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AstronautDetailed>>;
    public astronautRead(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling astronautRead.');
        }

        let headers = this.defaultHeaders;

        // authentication (Token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Token"]) {
            headers = headers.set('Token', this.configuration.apiKeys["Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<AstronautDetailed>(`${this.basePath}/astronaut/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
